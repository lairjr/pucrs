/* The following code was generated by JFlex 1.6.1 */



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>asdr_lex.flex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\34\1\35\1\1\1\1\1\40\1\40\1\1\16\34\4\0\1\1"+
    "\3\0\1\2\3\0\1\37\1\37\1\37\1\37\1\37\3\0\12\36"+
    "\1\0\1\37\1\0\1\37\3\0\1\5\1\33\1\6\1\33\1\7"+
    "\1\13\7\33\1\12\1\11\2\33\1\4\1\33\1\3\6\33\4\0"+
    "\1\10\1\0\1\33\1\22\1\32\1\17\1\24\1\27\1\33\1\26"+
    "\1\14\2\33\1\23\1\33\1\15\1\20\3\33\1\30\1\16\1\21"+
    "\1\31\1\25\3\33\1\37\1\0\1\37\1\0\6\34\1\41\32\34"+
    "\2\0\4\33\4\0\1\33\2\0\1\34\7\0\1\33\4\0\1\33"+
    "\5\0\27\33\1\0\37\33\1\0\u01ca\33\4\0\14\33\16\0\5\33"+
    "\7\0\1\33\1\0\1\33\21\0\160\34\5\33\1\0\2\33\2\0"+
    "\4\33\10\0\1\33\1\0\3\33\1\0\1\33\1\0\24\33\1\0"+
    "\123\33\1\0\213\33\1\0\5\34\2\0\236\33\11\0\46\33\2\0"+
    "\1\33\7\0\47\33\11\0\55\34\1\0\1\34\1\0\2\34\1\0"+
    "\2\34\1\0\1\34\10\0\33\33\5\0\3\33\15\0\4\34\7\0"+
    "\1\33\4\0\13\34\5\0\53\33\37\34\4\0\2\33\1\34\143\33"+
    "\1\0\1\33\10\34\1\0\6\34\2\33\2\34\1\0\4\34\2\33"+
    "\12\34\3\33\2\0\1\33\17\0\1\34\1\33\1\34\36\33\33\34"+
    "\2\0\131\33\13\34\1\33\16\0\12\34\41\33\11\34\2\33\4\0"+
    "\1\33\5\0\26\33\4\34\1\33\11\34\1\33\3\34\1\33\5\34"+
    "\22\0\31\33\3\34\244\0\4\34\66\33\3\34\1\33\22\34\1\33"+
    "\7\34\12\33\2\34\2\0\12\34\1\0\7\33\1\0\7\33\1\0"+
    "\3\34\1\0\10\33\2\0\2\33\2\0\26\33\1\0\7\33\1\0"+
    "\1\33\3\0\4\33\2\0\1\34\1\33\7\34\2\0\2\34\2\0"+
    "\3\34\1\33\10\0\1\34\4\0\2\33\1\0\3\33\2\34\2\0"+
    "\12\34\4\33\7\0\1\33\5\0\3\34\1\0\6\33\4\0\2\33"+
    "\2\0\26\33\1\0\7\33\1\0\2\33\1\0\2\33\1\0\2\33"+
    "\2\0\1\34\1\0\5\34\4\0\2\34\2\0\3\34\3\0\1\34"+
    "\7\0\4\33\1\0\1\33\7\0\14\34\3\33\1\34\13\0\3\34"+
    "\1\0\11\33\1\0\3\33\1\0\26\33\1\0\7\33\1\0\2\33"+
    "\1\0\5\33\2\0\1\34\1\33\10\34\1\0\3\34\1\0\3\34"+
    "\2\0\1\33\17\0\2\33\2\34\2\0\12\34\1\0\1\33\17\0"+
    "\3\34\1\0\10\33\2\0\2\33\2\0\26\33\1\0\7\33\1\0"+
    "\2\33\1\0\5\33\2\0\1\34\1\33\7\34\2\0\2\34\2\0"+
    "\3\34\10\0\2\34\4\0\2\33\1\0\3\33\2\34\2\0\12\34"+
    "\1\0\1\33\20\0\1\34\1\33\1\0\6\33\3\0\3\33\1\0"+
    "\4\33\3\0\2\33\1\0\1\33\1\0\2\33\3\0\2\33\3\0"+
    "\3\33\3\0\14\33\4\0\5\34\3\0\3\34\1\0\4\34\2\0"+
    "\1\33\6\0\1\34\16\0\12\34\11\0\1\33\7\0\3\34\1\0"+
    "\10\33\1\0\3\33\1\0\27\33\1\0\12\33\1\0\5\33\3\0"+
    "\1\33\7\34\1\0\3\34\1\0\4\34\7\0\2\34\1\0\2\33"+
    "\6\0\2\33\2\34\2\0\12\34\22\0\2\34\1\0\10\33\1\0"+
    "\3\33\1\0\27\33\1\0\12\33\1\0\5\33\2\0\1\34\1\33"+
    "\7\34\1\0\3\34\1\0\4\34\7\0\2\34\7\0\1\33\1\0"+
    "\2\33\2\34\2\0\12\34\1\0\2\33\17\0\2\34\1\0\10\33"+
    "\1\0\3\33\1\0\51\33\2\0\1\33\7\34\1\0\3\34\1\0"+
    "\4\34\1\33\10\0\1\34\10\0\2\33\2\34\2\0\12\34\12\0"+
    "\6\33\2\0\2\34\1\0\22\33\3\0\30\33\1\0\11\33\1\0"+
    "\1\33\2\0\7\33\3\0\1\34\4\0\6\34\1\0\1\34\1\0"+
    "\10\34\22\0\2\34\15\0\60\33\1\34\2\33\7\34\4\0\10\33"+
    "\10\34\1\0\12\34\47\0\2\33\1\0\1\33\2\0\2\33\1\0"+
    "\1\33\2\0\1\33\6\0\4\33\1\0\7\33\1\0\3\33\1\0"+
    "\1\33\1\0\1\33\2\0\2\33\1\0\4\33\1\34\2\33\6\34"+
    "\1\0\2\34\1\33\2\0\5\33\1\0\1\33\1\0\6\34\2\0"+
    "\12\34\2\0\2\33\42\0\1\33\27\0\2\34\6\0\12\34\13\0"+
    "\1\34\1\0\1\34\1\0\1\34\4\0\2\34\10\33\1\0\44\33"+
    "\4\0\24\34\1\0\2\34\5\33\13\34\1\0\44\34\11\0\1\34"+
    "\71\0\53\33\24\34\1\33\12\34\6\0\6\33\4\34\4\33\3\34"+
    "\1\33\3\34\2\33\7\34\3\33\4\34\15\33\14\34\1\33\17\34"+
    "\2\0\46\33\12\0\53\33\1\0\1\33\3\0\u0149\33\1\0\4\33"+
    "\2\0\7\33\1\0\1\33\1\0\4\33\2\0\51\33\1\0\4\33"+
    "\2\0\41\33\1\0\4\33\2\0\7\33\1\0\1\33\1\0\4\33"+
    "\2\0\17\33\1\0\71\33\1\0\4\33\2\0\103\33\2\0\3\34"+
    "\40\0\20\33\20\0\125\33\14\0\u026c\33\2\0\21\33\1\0\32\33"+
    "\5\0\113\33\3\0\3\33\17\0\15\33\1\0\4\33\3\34\13\0"+
    "\22\33\3\34\13\0\22\33\2\34\14\0\15\33\1\0\3\33\1\0"+
    "\2\34\14\0\64\33\40\34\3\0\1\33\3\0\2\33\1\34\2\0"+
    "\12\34\41\0\3\34\2\0\12\34\6\0\130\33\10\0\51\33\1\34"+
    "\1\33\5\0\106\33\12\0\35\33\3\0\14\34\4\0\14\34\12\0"+
    "\12\34\36\33\2\0\5\33\13\0\54\33\4\0\21\34\7\33\2\34"+
    "\6\0\12\34\46\0\27\33\5\34\4\0\65\33\12\34\1\0\35\34"+
    "\2\0\13\34\6\0\12\34\15\0\1\33\130\0\5\34\57\33\21\34"+
    "\7\33\4\0\12\34\21\0\11\34\14\0\3\34\36\33\12\34\3\0"+
    "\2\33\12\34\6\0\46\33\16\34\14\0\44\33\24\34\10\0\12\34"+
    "\3\0\3\33\12\34\44\33\122\0\3\34\1\0\25\34\4\33\1\34"+
    "\4\33\1\34\15\0\300\33\47\34\25\0\4\34\u0116\33\2\0\6\33"+
    "\2\0\46\33\2\0\6\33\2\0\10\33\1\0\1\33\1\0\1\33"+
    "\1\0\1\33\1\0\37\33\2\0\65\33\1\0\7\33\1\0\1\33"+
    "\3\0\3\33\1\0\7\33\3\0\4\33\2\0\6\33\4\0\15\33"+
    "\5\0\3\33\1\0\7\33\16\0\5\34\30\0\1\40\1\40\5\34"+
    "\20\0\2\33\23\0\1\33\13\0\5\34\5\0\6\34\1\0\1\33"+
    "\15\0\1\33\20\0\15\33\3\0\32\33\26\0\15\34\4\0\1\34"+
    "\3\0\14\34\21\0\1\33\4\0\1\33\2\0\12\33\1\0\1\33"+
    "\3\0\5\33\6\0\1\33\1\0\1\33\1\0\1\33\1\0\4\33"+
    "\1\0\13\33\2\0\4\33\5\0\5\33\4\0\1\33\21\0\51\33"+
    "\u0a77\0\57\33\1\0\57\33\1\0\205\33\6\0\4\33\3\34\16\0"+
    "\46\33\12\0\66\33\11\0\1\33\17\0\1\34\27\33\11\0\7\33"+
    "\1\0\7\33\1\0\7\33\1\0\7\33\1\0\7\33\1\0\7\33"+
    "\1\0\7\33\1\0\7\33\1\0\40\34\57\0\1\33\u01d5\0\3\33"+
    "\31\0\11\33\6\34\1\0\5\33\2\0\5\33\4\0\126\33\2\0"+
    "\2\34\2\0\3\33\1\0\132\33\1\0\4\33\5\0\51\33\3\0"+
    "\136\33\21\0\33\33\65\0\20\33\u0200\0\u19b6\33\112\0\u51cc\33\64\0"+
    "\u048d\33\103\0\56\33\2\0\u010d\33\3\0\20\33\12\34\2\33\24\0"+
    "\57\33\1\34\14\0\2\34\1\0\31\33\10\0\120\33\2\34\45\0"+
    "\11\33\2\0\147\33\2\0\4\33\1\0\2\33\16\0\12\33\120\0"+
    "\10\33\1\34\3\33\1\34\4\33\1\34\27\33\5\34\20\0\1\33"+
    "\7\0\64\33\14\0\2\34\62\33\21\34\13\0\12\34\6\0\22\34"+
    "\6\33\3\0\1\33\4\0\12\34\34\33\10\34\2\0\27\33\15\34"+
    "\14\0\35\33\3\0\4\34\57\33\16\34\16\0\1\33\12\34\46\0"+
    "\51\33\16\34\11\0\3\33\1\34\10\33\2\34\2\0\12\34\6\0"+
    "\27\33\3\0\1\33\1\34\4\0\60\33\1\34\1\33\3\34\2\33"+
    "\2\34\5\33\2\34\1\33\1\34\1\33\30\0\3\33\43\0\6\33"+
    "\2\0\6\33\2\0\6\33\11\0\7\33\1\0\7\33\221\0\43\33"+
    "\10\34\1\0\2\34\2\0\12\34\6\0\u2ba4\33\14\0\27\33\4\0"+
    "\61\33\u2104\0\u012e\33\2\0\76\33\2\0\152\33\46\0\7\33\14\0"+
    "\5\33\5\0\1\33\1\34\12\33\1\0\15\33\1\0\5\33\1\0"+
    "\1\33\1\0\2\33\1\0\2\33\1\0\154\33\41\0\u016b\33\22\0"+
    "\100\33\2\0\66\33\50\0\15\33\3\0\20\34\20\0\7\34\14\0"+
    "\2\33\30\0\3\33\31\0\1\33\6\0\5\33\1\0\207\33\2\0"+
    "\1\34\4\0\1\33\13\0\12\34\7\0\32\33\4\0\1\33\1\0"+
    "\32\33\13\0\131\33\3\0\6\33\2\0\6\33\2\0\6\33\2\0"+
    "\3\33\3\0\2\33\3\0\2\33\22\0\3\34\4\0\14\33\1\0"+
    "\32\33\1\0\23\33\1\0\2\33\1\0\17\33\2\0\16\33\42\0"+
    "\173\33\105\0\65\33\210\0\1\34\202\0\35\33\3\0\61\33\57\0"+
    "\37\33\21\0\33\33\65\0\36\33\2\0\44\33\4\0\10\33\1\0"+
    "\5\33\52\0\236\33\2\0\12\34\u0356\0\6\33\2\0\1\33\1\0"+
    "\54\33\1\0\2\33\3\0\1\33\2\0\27\33\252\0\26\33\12\0"+
    "\32\33\306\0\1\33\3\34\1\0\2\34\5\0\4\34\4\33\1\0"+
    "\3\33\1\0\33\33\4\0\3\34\4\0\1\34\40\0\35\33\203\0"+
    "\66\33\12\0\26\33\12\0\23\33\215\0\111\33\u03b7\0\3\34\65\33"+
    "\17\34\37\0\12\34\20\0\3\34\55\33\13\34\2\0\1\34\u0f42\0"+
    "\u036f\33\221\0\143\33\u0b9d\0\u042f\33\u33d1\0\u0239\33\u45c7\0\2\33\u2163\0"+
    "\5\34\3\0\26\34\2\0\7\34\36\0\4\34\224\0\3\34\u01bb\0"+
    "\125\33\1\0\107\33\1\0\2\33\2\0\1\33\2\0\2\33\2\0"+
    "\4\33\1\0\14\33\1\0\1\33\1\0\7\33\1\0\101\33\1\0"+
    "\4\33\2\0\10\33\1\0\7\33\1\0\34\33\1\0\4\33\1\0"+
    "\5\33\1\0\1\33\3\0\7\33\1\0\u0154\33\2\0\31\33\1\0"+
    "\31\33\1\0\37\33\1\0\31\33\1\0\37\33\1\0\31\33\1\0"+
    "\37\33\1\0\31\33\1\0\37\33\1\0\31\33\1\0\10\33\2\0"+
    "\62\34\u2800\0\ua6d7\33\51\0\u1035\33\13\0\336\33\u3fe2\0\u021e\33\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\34\36\0\140\34\200\0\360\34\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\11\3\1\4\1\5\2\3\1\6"+
    "\7\3\1\7\10\3\1\10\1\11\2\3\1\12\2\3"+
    "\1\13\2\3\1\14\4\3\1\15\1\16\1\3\1\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[52];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\42\0\u01ba\0\u01dc"+
    "\0\210\0\u01fe\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8\0\u02ca"+
    "\0\210\0\u02ec\0\u030e\0\u0330\0\u0352\0\u0374\0\u0396\0\u03b8"+
    "\0\u03da\0\210\0\210\0\u03fc\0\u041e\0\210\0\u0440\0\u0462"+
    "\0\210\0\u0484\0\u04a6\0\210\0\u04c8\0\u04ea\0\u050c\0\u052e"+
    "\0\210\0\210\0\u0550\0\210";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[52];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\11\5\1\6\2\5\1\7\2\5"+
    "\1\10\1\5\1\11\1\12\1\5\1\13\1\5\1\14"+
    "\2\5\1\2\1\3\1\15\1\16\45\0\1\3\33\0"+
    "\1\3\6\0\1\5\1\17\33\5\2\0\1\5\2\0"+
    "\35\5\2\0\1\5\2\0\13\5\1\20\11\5\1\21"+
    "\7\5\2\0\1\5\2\0\16\5\1\22\16\5\2\0"+
    "\1\5\2\0\16\5\1\23\16\5\2\0\1\5\2\0"+
    "\21\5\1\24\13\5\2\0\1\5\2\0\24\5\1\25"+
    "\10\5\2\0\1\5\2\0\17\5\1\26\15\5\2\0"+
    "\1\5\2\0\16\5\1\27\16\5\2\0\1\5\36\0"+
    "\1\15\5\0\2\5\1\30\32\5\2\0\1\5\2\0"+
    "\14\5\1\31\20\5\2\0\1\5\2\0\17\5\1\32"+
    "\15\5\2\0\1\5\2\0\16\5\1\33\16\5\2\0"+
    "\1\5\2\0\26\5\1\34\6\5\2\0\1\5\2\0"+
    "\12\5\1\35\22\5\2\0\1\5\2\0\13\5\1\36"+
    "\21\5\2\0\1\5\2\0\12\5\1\37\22\5\2\0"+
    "\1\5\2\0\3\5\1\40\31\5\2\0\1\5\2\0"+
    "\20\5\1\41\14\5\2\0\1\5\2\0\21\5\1\42"+
    "\13\5\2\0\1\5\2\0\22\5\1\43\12\5\2\0"+
    "\1\5\2\0\21\5\1\44\13\5\2\0\1\5\2\0"+
    "\30\5\1\45\4\5\2\0\1\5\2\0\15\5\1\46"+
    "\17\5\2\0\1\5\2\0\4\5\1\47\30\5\2\0"+
    "\1\5\2\0\21\5\1\50\13\5\2\0\1\5\2\0"+
    "\22\5\1\51\12\5\2\0\1\5\2\0\14\5\1\52"+
    "\20\5\2\0\1\5\2\0\5\5\1\53\27\5\2\0"+
    "\1\5\2\0\22\5\1\54\12\5\2\0\1\5\2\0"+
    "\12\5\1\55\22\5\2\0\1\5\2\0\6\5\1\56"+
    "\26\5\2\0\1\5\2\0\16\5\1\57\16\5\2\0"+
    "\1\5\2\0\7\5\1\60\25\5\2\0\1\5\2\0"+
    "\13\5\1\61\21\5\2\0\1\5\2\0\10\5\1\62"+
    "\1\63\23\5\2\0\1\5\2\0\11\5\1\64\23\5"+
    "\2\0\1\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1394];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\13\1\1\11\46\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[52];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private int comment_count = 0;

  private AsdrSample yyparser;

  public Yylex(java.io.Reader r, AsdrSample yyparser) {
    this(r);
    this.yyparser = yyparser;
  }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2618) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Erro lexico: caracter invalido: <" + yytext() + ">");
            }
          case 16: break;
          case 2: 
            { 
            }
          case 17: break;
          case 3: 
            { return AsdrSample.IDENT;
            }
          case 18: break;
          case 4: 
            { return AsdrSample.NUM;
            }
          case 19: break;
          case 5: 
            { return yytext().charAt(0);
            }
          case 20: break;
          case 6: 
            { return AsdrSample.IF;
            }
          case 21: break;
          case 7: 
            { return AsdrSample.INT;
            }
          case 22: break;
          case 8: 
            { return AsdrSample.BOOLEAN;
            }
          case 23: break;
          case 9: 
            { return AsdrSample.ELSE;
            }
          case 24: break;
          case 10: 
            { return AsdrSample.VOID;
            }
          case 25: break;
          case 11: 
            { return AsdrSample.WHILE;
            }
          case 26: break;
          case 12: 
            { return AsdrSample.DOUBLE;
            }
          case 27: break;
          case 13: 
            { return AsdrSample.FUNC;
            }
          case 28: break;
          case 14: 
            { yyparser.setDebug(true);
            }
          case 29: break;
          case 15: 
            { yyparser.setDebug(false);
            }
          case 30: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
